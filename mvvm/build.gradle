if(Boolean.valueOf(rootProject.ext.moduleMvvm)){
    apply plugin: 'com.android.application'
}else{
    apply plugin: 'com.android.library'
}

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        //MultiDex分包方法
        multiDexEnabled true
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }
    }

    dataBinding {
        enabled = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }


    //强制前缀
    resourcePrefix "mvvm_"

    /*java插件引入了一个概念叫做SourceSets，通过修改SourceSets中的属性，可以指定哪些源文件
   （或文件夹下的源文件）要被编译，哪些源文件要被排除。*/
    sourceSets {
        main {
            if (rootProject.ext.moduleMvvm) {
                manifest.srcFile 'src/main/module/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
                java {
                    //排除java/debug文件夹下的所有文件
                    exclude '*module'
                }
            }
        }
    }
    dexOptions {
        incremental false
        javaMaxHeapSize "4g"
    }

}

dependencies {


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //公用依赖包
    implementation project(':base')
    //Arouter路由
    annotationProcessor rootProject.ext.dependencies["arouter_compiler"]
    implementation rootProject.ext.dependencies["arouter_api"]
    implementation rootProject.ext.dependencies["arouter_annotation"]

    implementation rootProject.ext.dependencies["dagger"]
    implementation rootProject.ext.dependencies["dagger-android"]
    implementation rootProject.ext.dependencies["dagger-android-support"]
    annotationProcessor rootProject.ext.dependencies["dagger-android-processor"]
    annotationProcessor rootProject.ext.dependencies["dagger-compiler"]

    annotationProcessor "com.android.databinding:compiler:3.0.0"
    // Dagger dependencies
//    provided 'org.glassfish:javax.annotation:10.0-b28'
  /*  implementation "com.google.dagger:dagger:2.11"
    implementation "com.google.dagger:dagger-android:2.11"
    implementation "com.google.dagger:dagger-android-support:2.11"
    annotationProcessor "com.google.dagger:dagger-android-processor:2.11"
    annotationProcessor   "com.google.dagger:dagger-compiler:2.11"*/
}
